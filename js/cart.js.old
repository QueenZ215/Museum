    //CONSTANTS 
    const CART_KEY = 'museumCartV1';
    const TAX_RATE = 0.102;                 // 10.2%
    const MEMBER_DISCOUNT_RATE = 0.15;      // 15%
    const SHIPPING_RATE = 25.00;
    const VOLUME_DISCOUNT_TIERS = [
      { min:   0.00, max:   49.99, rate: 0.00 },
      { min:  50.00, max:   99.99, rate: 0.05 },
      { min: 100.00, max:  199.99, rate: 0.10 },
      { min: 200.00, max: Infinity, rate: 0.15 }
    ];

    // Persisted flag: which discount to apply when both could apply (‘member’ or ‘volume’)
    const DISCOUNT_PREF_KEY = 'museumCartDiscountPref';

    //STORAGE HELPERS (provided pattern) *
    function readCart() {
      try { return JSON.parse(localStorage.getItem(CART_KEY)) || []; }
      catch { return []; }
    }
    function writeCart(cart) {
      localStorage.setItem(CART_KEY, JSON.stringify(cart));
    }

    //SINGLE RENDER FUNCTION (do everything here)
    function render() {
      const root = document.getElementById('cart-root');
      let cart = readCart().filter(it => Number(it.unitPrice) > 0); // drop zero price items
      writeCart(cart); // keep it tidy

      // Empty cart UI
      if (cart.length === 0) {
        root.innerHTML = `
          <div class="cart-actions">
            <div class="left">
              <button class="btn" onclick="location.href='shop.html'">Keep Shopping</button>
            </div>
            <div class="right">
              <label><input type="checkbox" id="memberFlag"> Museum Member (15% off)</label>
            </div>
          </div>
          <div class="empty">Your cart is empty.</div>
          <div class="summary">
            <div class="row"><span>Items Subtotal</span><span class="num">$0.00</span></div>
            <div class="row"><span>Volume Discount</span><span class="num">$0.00</span></div>
            <div class="row"><span>Member Discount</span><span class="num">$0.00</span></div>
            <div class="row"><span>Shipping</span><span class="num">$0.00</span></div>
            <div class="row"><span>Subtotal (Taxable)</span><span class="num">$0.00</span></div>
            <div class="row"><span>Tax (10.2%)</span><span class="num">$0.00</span></div>
            <div class="row total"><span>Invoice Total</span><span class="num">$0.00</span></div>
          </div>
        `;
        // member checkbox persistence (no math impact when empty, but keeps UX consistent)
        const memberFlag = document.getElementById('memberFlag');
        memberFlag.checked = localStorage.getItem('museumMemberFlag') === '1';
        memberFlag.addEventListener('change', () => {
          localStorage.setItem('museumMemberFlag', memberFlag.checked ? '1' : '0');
          render();
        });
        return;
      }

      // Helpers in-scope (formatting)
      const usd = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' });
      const fmt = (n) => {
        const sign = n < 0 ? -1 : 1;
        const val = usd.format(Math.abs(n));
        return sign < 0 ? `(${val})` : val;
      };

      // Compute ItemTotal (unrounded sums)
      let itemTotal = 0;
      for (const it of cart) itemTotal += Number(it.unitPrice) * Number(it.qty || 0);

      // Determine volume discount rate
      let volumeRate = 0;
      for (const t of VOLUME_DISCOUNT_TIERS) {
        if (itemTotal >= t.min && itemTotal <= t.max) { volumeRate = t.rate; break; }
      }
      let volumeDiscount = itemTotal * volumeRate;

      // Member checkbox state (persisted)
      const memberChecked = (localStorage.getItem('museumMemberFlag') === '1');
      let memberDiscount = memberChecked ? itemTotal * MEMBER_DISCOUNT_RATE : 0;

      // Enforce one-discount rule:
      // If both could apply (member checked and volumeRate>0), prompt for choice, persist preference.
      let applied = 'none';
      if (memberDiscount > 0 && volumeDiscount > 0) {
        const pref = localStorage.getItem(DISCOUNT_PREF_KEY);
        if (pref === 'member' || pref === 'volume') {
          applied = pref;
        } else {
          const choice = confirm(
            `Both discounts are available:\n\n` +
            `Member: ${Math.round(MEMBER_DISCOUNT_RATE*100)}%\n` +
            `Volume: ${Math.round(volumeRate*100)}%\n\n` +
            `Press OK for Member discount, or Cancel for Volume discount.`
          );
          applied = choice ? 'member' : 'volume';
          localStorage.setItem(DISCOUNT_PREF_KEY, applied);
        }
      } else if (memberDiscount > 0) {
        applied = 'member';
      } else if (volumeDiscount > 0) {
        applied = 'volume';
      }

      // Apply only the chosen discount
      if (applied === 'member') volumeDiscount = 0;
      if (applied === 'volume') memberDiscount = 0;

      // Shipping is a flat fee, added after discounts
      const shipping = cart.length > 0 ? SHIPPING_RATE : 0;

      // Subtotal (taxable)
      const taxableSubtotal = itemTotal - memberDiscount - volumeDiscount + shipping;

      // Tax & Invoice total
      const taxAmount = taxableSubtotal * TAX_RATE;
      const invoiceTotal = taxableSubtotal + taxAmount;

      // Build line items table
      let rows = '';
      for (const it of cart) {
        const line = Number(it.unitPrice) * Number(it.qty || 0);
        rows += `
          <tr>
            <td style="width:72px"><img class="thumb" src="${it.image || '../images/shop/placeholder.png'}" alt="${(it.name || 'Item') + ' thumbnail'}"></td>
            <td>
              <strong>${it.name}</strong><br>
              <span class="muted">Unit: ${fmt(Number(it.unitPrice))}</span>
            </td>
            <td class="num">${Number(it.qty || 0)}</td>
            <td class="num">${fmt(line)}</td>
            <td class="num">
              <button class="btn secondary" data-action="remove" data-id="${it.id}">Remove</button>
            </td>
          </tr>
        `;
      }

      // Inject full UI (single render pass)
      root.innerHTML = `
        <div class="cart-actions">
          <div class="left">
            <button class="btn" onclick="location.href='shop.html'">Keep Shopping</button>
            <button class="btn secondary" id="clearCartBtn">Clear Cart</button>
          </div>
          <div class="right">
            <label><input type="checkbox" id="memberFlag"> Museum Member (15% off)</label>
            <button class="btn secondary" id="resetDiscountPrefBtn" title="Let me choose discount again">Reset Discount Choice</button>
          </div>
        </div>

        <table class="cart" aria-describedby="cartSummary">
          <thead>
            <tr>
              <th scope="col">Item</th>
              <th scope="col">Description</th>
              <th scope="col" class="num">Qty</th>
              <th scope="col" class="num">Amount</th>
              <th scope="col" class="num">Actions</th>
            </tr>
          </thead>
          <tbody>
            ${rows}
          </tbody>
        </table>

        <div class="summary" id="cartSummary">
          <div class="row"><span>Items Subtotal</span><span class="num">${fmt(itemTotal)}</span></div>
          <div class="row"><span>Volume Discount</span><span class="num">${fmt(-volumeDiscount)}</span></div>
          <div class="row"><span>Member Discount</span><span class="num">${fmt(-memberDiscount)}</span></div>
          <div class="row"><span>Shipping</span><span class="num">${fmt(shipping)}</span></div>
          <div class="row"><span>Subtotal (Taxable)</span><span class="num">${fmt(taxableSubtotal)}</span></div>
          <div class="row"><span>Tax (${(TAX_RATE*100).toFixed(1)}%)</span><span class="num">${fmt(taxAmount)}</span></div>
          <div class="row total"><span>Invoice Total</span><span class="num">${fmt(invoiceTotal)}</span></div>
        </div>
      `;

      // Wire interactions (inside render to keep “single function” pattern)
      document.getElementById('memberFlag').checked = memberChecked;
      document.getElementById('memberFlag').addEventListener('change', (e) => {
        localStorage.setItem('museumMemberFlag', e.target.checked ? '1' : '0');
        // Clear stored preference so the prompt can show again if rules change
        localStorage.removeItem(DISCOUNT_PREF_KEY);
        render();
      });

      const clearBtn = document.getElementById('clearCartBtn');
      clearBtn.addEventListener('click', () => {
        if (confirm('Clear all items from cart?')) {
          writeCart([]);
          render();
        }
      });

      const resetPrefBtn = document.getElementById('resetDiscountPrefBtn');
      resetPrefBtn.addEventListener('click', () => {
        localStorage.removeItem(DISCOUNT_PREF_KEY);
        alert('Discount choice reset. If both discounts are available, you will be asked again.');
        render();
      });

      // Remove buttons (event delegation)
      root.querySelectorAll('[data-action="remove"]').forEach(btn => {
        btn.addEventListener('click', () => {
          const id = btn.dataset.id;
          cart = readCart().filter(it => it.id !== id);
          writeCart(cart);
          render();
        });
      });
    }

    // Kick off initial render
    document.addEventListener('DOMContentLoaded', render);